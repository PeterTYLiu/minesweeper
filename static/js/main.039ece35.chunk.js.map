{"version":3,"sources":["components/Tile/Tile.js","App.js","serviceWorker.js","index.js"],"names":["Tile","isMine","minesAround","swept","setTilesRemaining","tilesRemaining","floodFill","boardState","setBoardState","id","loseGame","className","onClick","newBoardState","filter","tile","length","App","numOfColumns","currentFormat","generateNewBoardState","columns","rows","mines","r","c","push","minesToPlace","index","Math","floor","random","forEach","boardStateTile","find","tileAround","triggerTile","tilesAround","defaultBoardState","useState","numOfRows","gameStatus","setGameStatus","timeElapsed","setTimeElapsed","board","setBoard","localStorage","getItem","message","setMessage","useEffect","timer","setInterval","Number","toFixed","clearInterval","winGame","prevRecordTime","setItem","t","PreGameTiles","map","i","innerTile","tileId","startGame","Tiles","style","textAlign","toString","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.039ece35.chunk.js","sourcesContent":["export default function Tile({\r\n  isMine,\r\n  minesAround,\r\n  swept,\r\n  setTilesRemaining,\r\n  tilesRemaining,\r\n  floodFill,\r\n  boardState,\r\n  setBoardState,\r\n  id,\r\n  loseGame,\r\n}) {\r\n  return (\r\n    <div\r\n      className={`tile ${isMine ? \"mine\" : \"\"} ${\r\n        swept ? \"swept\" : \"\"\r\n      } around-${minesAround}`}\r\n      onClick={() => {\r\n        if (isMine && tilesRemaining > 0) return loseGame(id);\r\n        if (!swept && tilesRemaining > 0) {\r\n          const newBoardState = [...boardState];\r\n          newBoardState[id - 1].swept = true;\r\n          setTilesRemaining(tilesRemaining - 1);\r\n          // If minesAround == 0, initiate a flood fill on all contiguous 0s and their perimeter\r\n          if (minesAround == 0 && !isMine) {\r\n            floodFill(newBoardState[id - 1], newBoardState);\r\n          }\r\n          setBoardState(newBoardState);\r\n          setTilesRemaining(\r\n            newBoardState.filter((tile) => !tile.swept && !tile.isMine).length\r\n          );\r\n        }\r\n      }}\r\n    >\r\n      {!swept && tilesRemaining > 0 ? null : (\r\n        <p>{isMine ? \"ðŸ’£\" : minesAround}</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\nimport Tile from \"./components/Tile/Tile\";\nimport \"./App.css\";\n\nfunction App() {\n  let numOfRows = 20; //20;\n  let numOfColumns = 10; //10;\n  let numOfMines = 35; //35;\n  let currentFormat = `${numOfColumns}x${numOfRows}x${numOfMines}m`;\n  let numOfRemainingTiles = numOfRows * numOfColumns - numOfMines;\n\n  // Utility functions\n\n  function generateNewBoardState(\n    columns = numOfColumns,\n    rows = numOfRows,\n    mines = numOfMines\n  ) {\n    let boardState = [];\n    for (let r = 1; r <= rows; r++) {\n      for (let c = 1; c <= columns; c++) {\n        boardState.push({\n          c,\n          r,\n          isMine: false,\n          id: c + (r - 1) * columns,\n          swept: false,\n        });\n      }\n    }\n    let minesToPlace = mines;\n    while (minesToPlace > 0) {\n      let index = Math.floor(Math.random() * rows * columns);\n      if (!boardState[index].isMine) {\n        boardState[index].isMine = true;\n        minesToPlace--;\n      }\n    }\n    boardState.forEach((boardStateTile) => {\n      let { r, c } = boardStateTile;\n      boardStateTile.minesAround = [\n        boardState.find((tile) => tile.r == r && tile.c == c + 1),\n        boardState.find((tile) => tile.r == r && tile.c == c - 1),\n        boardState.find((tile) => tile.r == r + 1 && tile.c == c),\n        boardState.find((tile) => tile.r == r - 1 && tile.c == c),\n        boardState.find((tile) => tile.r == r + 1 && tile.c == c + 1),\n        boardState.find((tile) => tile.r == r - 1 && tile.c == c - 1),\n        boardState.find((tile) => tile.r == r + 1 && tile.c == c - 1),\n        boardState.find((tile) => tile.r == r - 1 && tile.c == c + 1),\n      ].filter((tileAround) => tileAround?.isMine).length;\n    });\n\n    return boardState;\n  }\n\n  function floodFill(triggerTile, boardState) {\n    const { r, c } = triggerTile;\n    let tilesAround = [\n      boardState.find((tile) => tile.r == r && tile.c == c + 1),\n      boardState.find((tile) => tile.r == r && tile.c == c - 1),\n      boardState.find((tile) => tile.r == r + 1 && tile.c == c),\n      boardState.find((tile) => tile.r == r - 1 && tile.c == c),\n      boardState.find((tile) => tile.r == r + 1 && tile.c == c + 1),\n      boardState.find((tile) => tile.r == r - 1 && tile.c == c - 1),\n      boardState.find((tile) => tile.r == r + 1 && tile.c == c - 1),\n      boardState.find((tile) => tile.r == r - 1 && tile.c == c + 1),\n    ].filter((tile) => tile?.id && !tile?.swept);\n    tilesAround.forEach((tile) => {\n      boardState[tile.id - 1].swept = true;\n      if (tile.minesAround == 0 && tilesAround.length > 0) {\n        floodFill(tile, boardState);\n      }\n    });\n  }\n\n  // Game state\n  const defaultBoardState = generateNewBoardState();\n\n  const [tilesRemaining, setTilesRemaining] = useState(numOfRemainingTiles);\n  const [gameStatus, setGameStatus] = useState(\"preGame\");\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  const [board, setBoard] = useState(defaultBoardState);\n  const [message, setMessage] = useState(\n    localStorage.getItem(currentFormat)\n      ? `Record: ${localStorage.getItem(currentFormat) + \"s\"}`\n      : \"No record\"\n  );\n\n  // Timer\n  useEffect(() => {\n    if (gameStatus == \"inGame\") {\n      const timer = setInterval(() => {\n        setTimeElapsed(Number((timeElapsed + 0.1).toFixed(1)));\n      }, 100);\n\n      return () => clearInterval(timer);\n    }\n  }, [gameStatus, timeElapsed]);\n\n  useEffect(() => {\n    if (tilesRemaining == 0) winGame();\n  }, [tilesRemaining]);\n\n  const startGame = (tileId) => {\n    let newBoardState = generateNewBoardState();\n    while (\n      newBoardState[tileId - 1].isMine ||\n      newBoardState[tileId - 1].minesAround != 0\n    ) {\n      newBoardState = generateNewBoardState();\n    }\n\n    newBoardState[tileId - 1].swept = true;\n\n    floodFill(newBoardState[tileId - 1], newBoardState);\n    setTilesRemaining(\n      newBoardState.filter((tile) => !tile.swept && !tile.isMine).length\n    );\n    setBoard(newBoardState);\n    setTimeElapsed(0);\n    setGameStatus(\"inGame\");\n  };\n\n  const winGame = () => {\n    setGameStatus(\"postGame\");\n    let prevRecordTime = localStorage.getItem(currentFormat);\n    if (!prevRecordTime || timeElapsed < prevRecordTime) {\n      localStorage.setItem(currentFormat, timeElapsed);\n      setMessage(`New record!`);\n    }\n  };\n\n  const loseGame = (id) => {\n    let newBoardState = [...board];\n    for (let t = 0; t < newBoardState.length; t++) {\n      newBoardState[t].swept = true;\n    }\n    setBoard(newBoardState);\n    setGameStatus(\"postGame\");\n  };\n\n  const prepNewGame = () => {\n    setBoard(defaultBoardState);\n    setTilesRemaining(numOfRemainingTiles);\n    setTimeElapsed(0);\n    setGameStatus(\"preGame\");\n    setMessage(\n      localStorage.getItem(currentFormat)\n        ? `Record: ${localStorage.getItem(currentFormat) + \"s\"}`\n        : \"No record\"\n    );\n  };\n\n  const PreGameTiles = defaultBoardState.map((tile, i) => {\n    if (tile.c == 1) {\n      return (\n        <div key={`pg-${i}`}>\n          {board.map((innerTile) => {\n            if (innerTile.r == i / numOfColumns + 1)\n              return (\n                <div\n                  className=\"tile pre-game\"\n                  onClick={() => {\n                    startGame(innerTile.id);\n                  }}\n                  key={`pg-r${innerTile.r}c${innerTile.c}`}\n                />\n              );\n          })}\n        </div>\n      );\n    }\n  });\n\n  const Tiles = board.map((tile, i) => {\n    if (tile.c == 1) {\n      return (\n        <div key={i}>\n          {board.map((innerTile) => {\n            if (innerTile.r == i / numOfColumns + 1)\n              return (\n                <Tile\n                  minesAround={innerTile.minesAround}\n                  isMine={innerTile.isMine}\n                  setTilesRemaining={setTilesRemaining}\n                  tilesRemaining={tilesRemaining}\n                  key={`r${innerTile.r}c${innerTile.c}`}\n                  swept={innerTile.swept}\n                  c={innerTile.c}\n                  r={innerTile.r}\n                  boardState={board}\n                  setBoardState={setBoard}\n                  floodFill={floodFill}\n                  id={innerTile.id}\n                  loseGame={loseGame}\n                />\n              );\n          })}\n        </div>\n      );\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"controls\">\n          <span>{message}</span>\n\n          {gameStatus == \"postGame\" && (\n            <button onClick={prepNewGame}>\n              {tilesRemaining == 0 ? \"ðŸ˜Ž\" : \"ðŸ˜¬\"}\n            </button>\n          )}\n\n          <span style={{ textAlign: \"right\" }}>\n            {timeElapsed.toString().includes(\".\")\n              ? timeElapsed\n              : timeElapsed.toString() + \".0\"}\n            s\n          </span>\n        </div>\n        <div className={`board ${gameStatus == \"postGame\" && \"postGame\"}`}>\n          {gameStatus == \"preGame\" ? PreGameTiles : Tiles}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\nserviceWorker.register();\n"],"sourceRoot":""}