{"version":3,"sources":["components/Tile/Tile.js","components/Timer/Timer.tsx","App.js","serviceWorkerRegistration.ts","index.js"],"names":["Tile","isMine","minesAround","swept","setTilesRemaining","tilesRemaining","floodFill","boardState","setBoardState","id","loseGame","gameStatus","className","onClick","newBoardState","filter","tile","length","Timer","currentFormat","setMessage","useState","timeElapsed","setTimeElapsed","useEffect","timer","setInterval","Number","toFixed","clearInterval","console","log","prevRecordTime","localStorage","getItem","setItem","toString","includes","App","numOfColumns","generateNewBoardState","columns","rows","mines","r","c","push","minesToPlace","index","Math","floor","random","forEach","boardStateTile","find","tileAround","triggerTile","tilesAround","defaultBoardState","numOfRows","setGameStatus","board","setBoard","message","winGame","document","querySelector","setAttribute","navigator","vibrate","t","prepNewGame","PreGameTiles","map","i","innerTile","tileId","startGame","Tiles","style","width","opacity","textAlign","color","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f082fcd4.chunk.js","sourcesContent":["export default function Tile({\r\n  isMine,\r\n  minesAround,\r\n  swept,\r\n  setTilesRemaining,\r\n  tilesRemaining,\r\n  floodFill,\r\n  boardState,\r\n  setBoardState,\r\n  id,\r\n  loseGame,\r\n  gameStatus,\r\n}) {\r\n  return (\r\n    <div\r\n      className={`tile id-${id} ${isMine ? \"mine\" : \"\"} ${\r\n        swept ? \"swept\" : \"\"\r\n      } around-${minesAround}`}\r\n      onClick={() => {\r\n        if (isMine && gameStatus == \"inGame\") return loseGame(id);\r\n        if (!swept && gameStatus == \"inGame\") {\r\n          const newBoardState = [...boardState];\r\n          newBoardState[id - 1].swept = true;\r\n          setTilesRemaining(tilesRemaining - 1);\r\n          // If minesAround == 0, initiate a flood fill on all contiguous 0s and their perimeter\r\n          if (minesAround == 0 && !isMine) {\r\n            floodFill(newBoardState[id - 1], newBoardState);\r\n            setTilesRemaining(\r\n              newBoardState.filter((tile) => !tile.swept && !tile.isMine).length\r\n            );\r\n          }\r\n          setBoardState(newBoardState);\r\n        }\r\n      }}\r\n    >\r\n      {!swept && gameStatus == \"inGame\" ? null : (\r\n        <p>\r\n          {isMine ? (tilesRemaining ? \"💣\" : \"🌼\") : null}\r\n          {!isMine && minesAround && swept ? minesAround : null}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\ninterface TimerProps {\r\n  gameStatus: \"preGame\" | \"inGame\" | \"wonGame\" | \"lostGame\";\r\n  currentFormat: string;\r\n  setMessage(message: string): any;\r\n}\r\n\r\nexport default function Timer({\r\n  gameStatus,\r\n  currentFormat,\r\n  setMessage,\r\n}: TimerProps) {\r\n  const [timeElapsed, setTimeElapsed] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (gameStatus == \"inGame\") {\r\n      const timer = setInterval(() => {\r\n        setTimeElapsed(Number((timeElapsed + 0.1).toFixed(1)));\r\n      }, 100);\r\n\r\n      return () => clearInterval(timer);\r\n    }\r\n  }, [gameStatus, timeElapsed]);\r\n\r\n  useEffect(() => {\r\n    console.log(`The game status is ${gameStatus}`);\r\n\r\n    if (gameStatus == \"wonGame\") {\r\n      let prevRecordTime = localStorage.getItem(currentFormat);\r\n      if (!prevRecordTime || timeElapsed < Number(prevRecordTime)) {\r\n        localStorage.setItem(currentFormat, timeElapsed.toString());\r\n        setMessage(`🎉 New record!`);\r\n        console.log(`New record: ${timeElapsed}s`);\r\n      }\r\n    }\r\n    if (gameStatus == \"preGame\") {\r\n      setTimeElapsed(0);\r\n    }\r\n  }, [gameStatus]);\r\n\r\n  return (\r\n    <>\r\n      {timeElapsed.toString().includes(\".\")\r\n        ? timeElapsed\r\n        : timeElapsed.toString() + \".0\"}\r\n      s\r\n    </>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport Tile from \"./components/Tile/Tile\";\r\nimport Timer from \"./components/Timer\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  let numOfRows = 20; //20;\r\n  let numOfColumns = 10; //10;\r\n  let numOfMines = 35; //35;\r\n  let currentFormat = `${numOfColumns}x${numOfRows}x${numOfMines}m`;\r\n  let numOfRemainingTiles = numOfRows * numOfColumns - numOfMines;\r\n\r\n  // Utility functions\r\n\r\n  function generateNewBoardState(\r\n    columns = numOfColumns,\r\n    rows = numOfRows,\r\n    mines = numOfMines\r\n  ) {\r\n    let boardState = [];\r\n    for (let r = 1; r <= rows; r++) {\r\n      for (let c = 1; c <= columns; c++) {\r\n        boardState.push({\r\n          c,\r\n          r,\r\n          isMine: false,\r\n          id: c + (r - 1) * columns,\r\n          swept: false,\r\n        });\r\n      }\r\n    }\r\n    let minesToPlace = mines;\r\n    while (minesToPlace > 0) {\r\n      let index = Math.floor(Math.random() * rows * columns);\r\n      if (!boardState[index].isMine) {\r\n        boardState[index].isMine = true;\r\n        minesToPlace--;\r\n      }\r\n    }\r\n    boardState.forEach((boardStateTile) => {\r\n      let { r, c } = boardStateTile;\r\n      boardStateTile.minesAround = [\r\n        boardState.find((tile) => tile.r == r && tile.c == c + 1),\r\n        boardState.find((tile) => tile.r == r && tile.c == c - 1),\r\n        boardState.find((tile) => tile.r == r + 1 && tile.c == c),\r\n        boardState.find((tile) => tile.r == r - 1 && tile.c == c),\r\n        boardState.find((tile) => tile.r == r + 1 && tile.c == c + 1),\r\n        boardState.find((tile) => tile.r == r - 1 && tile.c == c - 1),\r\n        boardState.find((tile) => tile.r == r + 1 && tile.c == c - 1),\r\n        boardState.find((tile) => tile.r == r - 1 && tile.c == c + 1),\r\n      ].filter((tileAround) => tileAround?.isMine).length;\r\n    });\r\n\r\n    return boardState;\r\n  }\r\n\r\n  function floodFill(triggerTile, boardState) {\r\n    const { r, c } = triggerTile;\r\n    let tilesAround = [\r\n      boardState.find((tile) => tile.r == r && tile.c == c + 1),\r\n      boardState.find((tile) => tile.r == r && tile.c == c - 1),\r\n      boardState.find((tile) => tile.r == r + 1 && tile.c == c),\r\n      boardState.find((tile) => tile.r == r - 1 && tile.c == c),\r\n      boardState.find((tile) => tile.r == r + 1 && tile.c == c + 1),\r\n      boardState.find((tile) => tile.r == r - 1 && tile.c == c - 1),\r\n      boardState.find((tile) => tile.r == r + 1 && tile.c == c - 1),\r\n      boardState.find((tile) => tile.r == r - 1 && tile.c == c + 1),\r\n    ].filter((tile) => tile?.id && !tile?.swept);\r\n    tilesAround.forEach((tile) => {\r\n      boardState[tile.id - 1].swept = true;\r\n      if (tile.minesAround == 0 && tilesAround.length > 0) {\r\n        floodFill(tile, boardState);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Game state\r\n  const defaultBoardState = generateNewBoardState();\r\n\r\n  const [tilesRemaining, setTilesRemaining] = useState(numOfRemainingTiles);\r\n  const [gameStatus, setGameStatus] = useState(\"preGame\");\r\n  const [board, setBoard] = useState(defaultBoardState);\r\n  const [message, setMessage] = useState(\r\n    localStorage.getItem(currentFormat)\r\n      ? `🏆 ${localStorage.getItem(currentFormat) + \"s\"}`\r\n      : \"🏆 none\"\r\n  );\r\n\r\n  // Timer\r\n  useEffect(() => {\r\n    if (tilesRemaining == 0) winGame();\r\n  }, [tilesRemaining]);\r\n\r\n  const startGame = (tileId) => {\r\n    let newBoardState = generateNewBoardState();\r\n    while (\r\n      newBoardState[tileId - 1].isMine ||\r\n      newBoardState[tileId - 1].minesAround != 0\r\n    ) {\r\n      newBoardState = generateNewBoardState();\r\n    }\r\n\r\n    newBoardState[tileId - 1].swept = true;\r\n\r\n    floodFill(newBoardState[tileId - 1], newBoardState);\r\n    setTilesRemaining(\r\n      newBoardState.filter((tile) => !tile.swept && !tile.isMine).length\r\n    );\r\n    setBoard(newBoardState);\r\n    setGameStatus(\"inGame\");\r\n  };\r\n\r\n  const winGame = () => {\r\n    setGameStatus(\"wonGame\");\r\n  };\r\n\r\n  const loseGame = (id) => {\r\n    setGameStatus(\"lostGame\");\r\n    document\r\n      .querySelector(`.id-${id}`)\r\n      .setAttribute(\"style\", \"background: red\");\r\n    navigator.vibrate(200);\r\n    let newBoardState = [...board];\r\n    for (let t = 0; t < newBoardState.length; t++) {\r\n      if (newBoardState[t].isMine) newBoardState[t].swept = true;\r\n    }\r\n    setBoard(newBoardState);\r\n  };\r\n\r\n  const prepNewGame = () => {\r\n    setBoard(defaultBoardState);\r\n    setTilesRemaining(numOfRemainingTiles);\r\n    setGameStatus(\"preGame\");\r\n    setMessage(\r\n      localStorage.getItem(currentFormat)\r\n        ? `🏆 ${localStorage.getItem(currentFormat) + \"s\"}`\r\n        : \"🏆 none\"\r\n    );\r\n  };\r\n\r\n  const PreGameTiles = defaultBoardState.map((tile, i) => {\r\n    if (tile.c == 1) {\r\n      return (\r\n        <div key={`pg-${i}`}>\r\n          {board.map((innerTile) => {\r\n            if (innerTile.r == i / numOfColumns + 1)\r\n              return (\r\n                <div\r\n                  className=\"tile pre-game\"\r\n                  onClick={() => {\r\n                    startGame(innerTile.id);\r\n                  }}\r\n                  key={`pg-r${innerTile.r}c${innerTile.c}`}\r\n                />\r\n              );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n  });\r\n\r\n  const Tiles = board.map((tile, i) => {\r\n    if (tile.c == 1) {\r\n      return (\r\n        <div key={i}>\r\n          {board.map((innerTile) => {\r\n            if (innerTile.r == i / numOfColumns + 1)\r\n              return (\r\n                <Tile\r\n                  minesAround={innerTile.minesAround}\r\n                  isMine={innerTile.isMine}\r\n                  setTilesRemaining={setTilesRemaining}\r\n                  tilesRemaining={tilesRemaining}\r\n                  key={`r${innerTile.r}c${innerTile.c}`}\r\n                  swept={innerTile.swept}\r\n                  c={innerTile.c}\r\n                  r={innerTile.r}\r\n                  boardState={board}\r\n                  setBoardState={setBoard}\r\n                  floodFill={floodFill}\r\n                  id={innerTile.id}\r\n                  loseGame={loseGame}\r\n                  gameStatus={gameStatus}\r\n                />\r\n              );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"controls\">\r\n          <span>{message}</span>\r\n\r\n          {gameStatus == \"wonGame\" && <div onClick={prepNewGame}>{\"😎\"}</div>}\r\n          {gameStatus == \"lostGame\" && <div onClick={prepNewGame}>{\"😬\"}</div>}\r\n          {(gameStatus == \"preGame\" || gameStatus == \"inGame\") && (\r\n            <span\r\n              style={{\r\n                width: \"60px\",\r\n                opacity: \"0.7\",\r\n                textAlign: \"center\",\r\n                color: \"black\",\r\n              }}\r\n            >\r\n              v1.1\r\n            </span>\r\n          )}\r\n\r\n          <span style={{ textAlign: \"right\" }}>\r\n            <Timer\r\n              gameStatus={gameStatus}\r\n              setMessage={setMessage}\r\n              currentFormat={currentFormat}\r\n            />\r\n          </span>\r\n        </div>\r\n        <div\r\n          className={`board ${\r\n            (gameStatus == \"lostGame\" || gameStatus == \"wonGame\") && \"postGame\"\r\n          }`}\r\n        >\r\n          {gameStatus == \"preGame\" ? PreGameTiles : Tiles}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}