{"version":3,"sources":["components/Tile/Tile.tsx","components/Timer/Timer.tsx","components/SettingsPanel/SettingsPanel.tsx","App.tsx","serviceWorkerRegistration.ts","index.js"],"names":["Tile","isMine","minesAround","swept","setTilesRemaining","tilesRemaining","floodFill","boardState","setBoardState","id","flagStatus","loseGame","gameStatus","flaggingMode","toggleFlagStatus","newBoardState","swipeHandler","useSwipeable","onSwiped","TileContents","style","fontWeight","className","position","color","fontSize","paddingBottom","onContextMenu","e","preventDefault","onClick","filter","tile","length","Timer","currentFormat","setMessage","useState","timeElapsed","setTimeElapsed","useEffect","timer","setInterval","Number","toFixed","clearInterval","console","log","prevRecordTime","localStorage","getItem","setItem","toString","includes","SettingsPanel","setFlaggingMode","setSettingsPanelVisible","showPWAHint","a","navigator","getInstalledRelatedApps","height","width","backgroundColor","display","placeItems","flexDirection","gap","background","maxWidth","borderRadius","padding","type","checked","onChange","newFlaggingMode","href","target","App","numOfColumns","settingsPanelVisible","generateNewBoardState","columns","rows","mines","r","c","push","minesToPlace","index","Math","floor","random","forEach","boardStateTile","find","tileAround","triggerTile","tilesAround","defaultBoardState","numOfRows","setGameStatus","board","setBoard","message","winGame","document","querySelector","setAttribute","t","prepNewGame","PreGameTiles","map","i","innerTile","tileId","startGame","Tiles","textAlign","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3d8f2cda.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useSwipeable } from \"react-swipeable\";\r\n// Typescript\r\nimport ITile from \"../../types/tile\";\r\nimport { gameStatuses } from \"../../types/gameStatuses\";\r\nimport { flaggingModes } from \"../../types/settings\";\r\n\r\ninterface TileProps extends ITile {\r\n  tilesRemaining: number;\r\n  setTilesRemaining(arg0: number): any;\r\n  floodFill(triggerTile: ITile, boardState: ITile[]): any;\r\n  boardState: ITile[];\r\n  setBoardState(arg0: ITile[]): any;\r\n  loseGame(id: number): any;\r\n  gameStatus: gameStatuses;\r\n  flaggingMode: flaggingModes;\r\n}\r\n\r\nexport default function Tile({\r\n  isMine,\r\n  minesAround,\r\n  swept,\r\n  setTilesRemaining,\r\n  tilesRemaining,\r\n  floodFill,\r\n  boardState,\r\n  setBoardState,\r\n  id,\r\n  flagStatus,\r\n  loseGame,\r\n  gameStatus,\r\n  flaggingMode,\r\n}: TileProps) {\r\n  const toggleFlagStatus = () => {\r\n    if (!swept) {\r\n      const newBoardState = [...boardState];\r\n      newBoardState[id - 1].flagStatus =\r\n        flagStatus === \"flagged\" ? \"unflagged\" : \"flagged\";\r\n      setBoardState(newBoardState);\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (flagStatus === \"unflagged\" && isMine && gameStatus === \"inGame\")\r\n      return loseGame(id);\r\n    if (flagStatus === \"unflagged\" && !swept && gameStatus === \"inGame\") {\r\n      const newBoardState = [...boardState];\r\n      newBoardState[id - 1].swept = true;\r\n      setTilesRemaining(tilesRemaining - 1);\r\n      if (minesAround === 0 && !isMine) {\r\n        floodFill(newBoardState[id - 1], newBoardState);\r\n        setTilesRemaining(\r\n          newBoardState.filter((tile) => !tile.swept && !tile.isMine).length\r\n        );\r\n      }\r\n      setBoardState(newBoardState);\r\n    }\r\n  };\r\n\r\n  const swipeHandler = useSwipeable({\r\n    onSwiped: () => toggleFlagStatus(),\r\n  });\r\n\r\n  const TileContents = (\r\n    <>\r\n      {((!swept && gameStatus === \"inGame\") || (swept && isMine)) &&\r\n      flagStatus === \"flagged\" ? (\r\n        <p style={{ fontWeight: \"normal\" }} className={flagStatus}>\r\n          🚩\r\n        </p>\r\n      ) : null}\r\n      {gameStatus !== \"inGame\" && !isMine && flagStatus === \"flagged\" ? (\r\n        <>\r\n          <p style={{ fontWeight: \"normal\" }} className={flagStatus}>\r\n            🚩\r\n          </p>\r\n          <span\r\n            style={{\r\n              position: \"absolute\",\r\n              color: \"white\",\r\n              fontSize: \"2.2rem\",\r\n              paddingBottom: \"2px\",\r\n            }}\r\n          >\r\n            🛇\r\n          </span>\r\n        </>\r\n      ) : null}\r\n      {!swept && flagStatus === \"maybe\" ? <p>❔</p> : null}\r\n      {gameStatus === \"inGame\" ? (\r\n        !isMine && minesAround && swept ? (\r\n          <p>{minesAround}</p>\r\n        ) : null\r\n      ) : isMine ? (\r\n        flagStatus !== \"flagged\" ? (\r\n          gameStatus === \"wonGame\" ? (\r\n            <p>🌼</p>\r\n          ) : (\r\n            <p>💣</p>\r\n          )\r\n        ) : gameStatus === \"wonGame\" ? (\r\n          <p>🌼</p>\r\n        ) : null\r\n      ) : minesAround && swept ? (\r\n        <p>{minesAround}</p>\r\n      ) : null}\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div\r\n      {...swipeHandler}\r\n      className={`tile id-${id} ${isMine ? \"mine\" : \"\"} ${\r\n        swept ? \"swept\" : \"\"\r\n      } around-${minesAround}`}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n        if (flaggingMode === \"withoutMaybe\") toggleFlagStatus();\r\n      }}\r\n      onClick={handleClick}\r\n    >\r\n      {TileContents}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\ninterface TimerProps {\r\n  gameStatus: \"preGame\" | \"inGame\" | \"wonGame\" | \"lostGame\";\r\n  currentFormat: string;\r\n  setMessage(message: string): any;\r\n}\r\n\r\nexport default function Timer({\r\n  gameStatus,\r\n  currentFormat,\r\n  setMessage,\r\n}: TimerProps) {\r\n  const [timeElapsed, setTimeElapsed] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (gameStatus === \"inGame\") {\r\n      const timer = setInterval(() => {\r\n        setTimeElapsed(Number((timeElapsed + 0.1).toFixed(1)));\r\n      }, 100);\r\n\r\n      return () => clearInterval(timer);\r\n    }\r\n  }, [gameStatus, timeElapsed]);\r\n\r\n  useEffect(() => {\r\n    console.log(`The game status is ${gameStatus}`);\r\n\r\n    if (gameStatus === \"wonGame\") {\r\n      let prevRecordTime = localStorage.getItem(currentFormat);\r\n      if (!prevRecordTime || timeElapsed < Number(prevRecordTime)) {\r\n        localStorage.setItem(currentFormat, timeElapsed.toString());\r\n        setMessage(`🎉 New record!`);\r\n        console.log(`New record: ${timeElapsed}s`);\r\n      }\r\n    }\r\n    if (gameStatus === \"preGame\") {\r\n      setTimeElapsed(0);\r\n    }\r\n  }, [gameStatus]);\r\n\r\n  return (\r\n    <>\r\n      {timeElapsed.toString().includes(\".\")\r\n        ? timeElapsed\r\n        : timeElapsed.toString() + \".0\"}\r\n      s\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { flaggingModes } from \"../../types/settings\";\r\n\r\ninterface SettingsPanelProps {\r\n  flaggingMode: flaggingModes;\r\n  setFlaggingMode(flaggingMode: flaggingModes): any;\r\n  setSettingsPanelVisible(visibility: boolean): any;\r\n}\r\n\r\nexport default function SettingsPanel({\r\n  flaggingMode,\r\n  setFlaggingMode,\r\n  setSettingsPanelVisible,\r\n}: SettingsPanelProps) {\r\n  const handleChangeFlaggingMode = () => {\r\n    let newFlaggingMode = (\r\n      flaggingMode === \"off\" ? \"withoutMaybe\" : \"off\"\r\n    ) as flaggingModes;\r\n    setFlaggingMode(newFlaggingMode);\r\n    localStorage.setItem(\"flaggingMode\", newFlaggingMode);\r\n  };\r\n\r\n  let showPWAHint = true;\r\n  (async () => {\r\n    let installedRelatedApps = await (\r\n      navigator as any\r\n    ).getInstalledRelatedApps();\r\n    if (installedRelatedApps.length) showPWAHint = false;\r\n  })();\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"absolute\",\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        backgroundColor: \"#00000088\",\r\n        display: \"grid\",\r\n        placeItems: \"center\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          gap: \"24px\",\r\n          background: \"white\",\r\n          maxWidth: \"350px\",\r\n          width: \"90%\",\r\n          borderRadius: \"4px\",\r\n          padding: \"24px\",\r\n        }}\r\n        className=\"settings-panel\"\r\n      >\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={flaggingMode === \"off\" ? false : true}\r\n            onChange={handleChangeFlaggingMode}\r\n          />\r\n          <div>\r\n            <h3>Flagging</h3>\r\n            <p>Swipe or right-click a tile to flag it</p>\r\n          </div>\r\n        </label>\r\n        <hr />\r\n        {showPWAHint ? (\r\n          <>\r\n            <p>\r\n              This is a{\" \"}\r\n              <a\r\n                href=\"https://mobilesyrup.com/2020/05/24/how-install-progressive-web-app-pwa-android-ios-pc-mac/\"\r\n                target=\"_blank\"\r\n              >\r\n                progressive web app\r\n              </a>\r\n              . For the best minesweeping experience, install this app on your\r\n              device. No tracking, completely offline.\r\n            </p>\r\n            <hr />\r\n          </>\r\n        ) : null}\r\n\r\n        <p>\r\n          Made with ❤️ by{\" \"}\r\n          <a href=\"https://www.linkedin.com/in/peter-ty-liu/\" target=\"_blank\">\r\n            PL\r\n          </a>\r\n          <br />\r\n          <span style={{ fontSize: \"12px\" }}>v1.3.1.1 (27/11/2021)</span>\r\n        </p>\r\n        <div>\r\n          <div\r\n            className=\"ms-button\"\r\n            style={{ fontSize: \"1.3rem\" }}\r\n            onClick={() => {\r\n              setSettingsPanelVisible(false);\r\n            }}\r\n          >\r\n            Done\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport Tile from \"./components/Tile\";\r\nimport Timer from \"./components/Timer\";\r\nimport SettingsPanel from \"./components/SettingsPanel\";\r\nimport \"./App.css\";\r\n// Typescript\r\nimport ITile from \"./types/tile\";\r\nimport { gameStatuses } from \"./types/gameStatuses\";\r\nimport { flaggingModes } from \"./types/settings\";\r\n\r\nfunction App() {\r\n  let numOfRows = 20; //20;\r\n  let numOfColumns = 10; //10;\r\n  let numOfMines = 35; //35;\r\n  let currentFormat = `${numOfColumns}x${numOfRows}x${numOfMines}m`;\r\n  let numOfRemainingTiles = numOfRows * numOfColumns - numOfMines;\r\n\r\n  // Settings\r\n  const [settingsPanelVisible, setSettingsPanelVisible] = useState(false);\r\n  const [flaggingMode, setFlaggingMode] = useState<flaggingModes>(\r\n    (localStorage.getItem(\"flaggingMode\") as flaggingModes) || \"withoutMaybe\"\r\n  );\r\n\r\n  // Utility functions\r\n\r\n  function generateNewBoardState(\r\n    columns = numOfColumns,\r\n    rows = numOfRows,\r\n    mines = numOfMines\r\n  ) {\r\n    let boardState: ITile[] = [];\r\n    for (let r = 1; r <= rows; r++) {\r\n      for (let c = 1; c <= columns; c++) {\r\n        boardState.push({\r\n          c,\r\n          r,\r\n          isMine: false,\r\n          id: c + (r - 1) * columns,\r\n          swept: false,\r\n          flagStatus: \"unflagged\",\r\n          minesAround: 0,\r\n        });\r\n      }\r\n    }\r\n    let minesToPlace = mines;\r\n    while (minesToPlace > 0) {\r\n      let index = Math.floor(Math.random() * rows * columns);\r\n      if (!boardState[index].isMine) {\r\n        boardState[index].isMine = true;\r\n        minesToPlace--;\r\n      }\r\n    }\r\n    boardState.forEach((boardStateTile) => {\r\n      let { r, c } = boardStateTile;\r\n      boardStateTile.minesAround = [\r\n        boardState.find((tile) => tile.r === r && tile.c === c + 1),\r\n        boardState.find((tile) => tile.r === r && tile.c === c - 1),\r\n        boardState.find((tile) => tile.r === r + 1 && tile.c === c),\r\n        boardState.find((tile) => tile.r === r - 1 && tile.c === c),\r\n        boardState.find((tile) => tile.r === r + 1 && tile.c === c + 1),\r\n        boardState.find((tile) => tile.r === r - 1 && tile.c === c - 1),\r\n        boardState.find((tile) => tile.r === r + 1 && tile.c === c - 1),\r\n        boardState.find((tile) => tile.r === r - 1 && tile.c === c + 1),\r\n      ].filter((tileAround) => tileAround?.isMine).length;\r\n    });\r\n\r\n    return boardState;\r\n  }\r\n\r\n  function floodFill(triggerTile: ITile, boardState: ITile[]) {\r\n    const { r, c } = triggerTile;\r\n    let tilesAround = [\r\n      boardState.find((tile) => tile.r === r && tile.c === c + 1),\r\n      boardState.find((tile) => tile.r === r && tile.c === c - 1),\r\n      boardState.find((tile) => tile.r === r + 1 && tile.c === c),\r\n      boardState.find((tile) => tile.r === r - 1 && tile.c === c),\r\n      boardState.find((tile) => tile.r === r + 1 && tile.c === c + 1),\r\n      boardState.find((tile) => tile.r === r - 1 && tile.c === c - 1),\r\n      boardState.find((tile) => tile.r === r + 1 && tile.c === c - 1),\r\n      boardState.find((tile) => tile.r === r - 1 && tile.c === c + 1),\r\n    ].filter((tile) => tile?.id && !tile?.swept);\r\n    tilesAround.forEach((tile) => {\r\n      if (tile && tile.flagStatus === \"unflagged\")\r\n        boardState[tile.id - 1].swept = true;\r\n      if (tile?.minesAround === 0 && tilesAround.length > 0) {\r\n        floodFill(tile, boardState);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Game state\r\n  const defaultBoardState = generateNewBoardState();\r\n\r\n  const [tilesRemaining, setTilesRemaining] = useState(numOfRemainingTiles);\r\n  const [gameStatus, setGameStatus] = useState<gameStatuses>(\"preGame\");\r\n  const [board, setBoard] = useState<ITile[]>(defaultBoardState);\r\n  const [message, setMessage] = useState(\r\n    localStorage.getItem(currentFormat)\r\n      ? `🏆 ${localStorage.getItem(currentFormat) + \"s\"}`\r\n      : \"🏆 none\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (tilesRemaining === 0) winGame();\r\n  }, [tilesRemaining]);\r\n\r\n  const startGame = (tileId: number) => {\r\n    let newBoardState = generateNewBoardState();\r\n    while (\r\n      newBoardState[tileId - 1].isMine ||\r\n      newBoardState[tileId - 1].minesAround !== 0\r\n    ) {\r\n      newBoardState = generateNewBoardState();\r\n    }\r\n\r\n    newBoardState[tileId - 1].swept = true;\r\n\r\n    floodFill(newBoardState[tileId - 1], newBoardState);\r\n    setTilesRemaining(\r\n      newBoardState.filter((tile) => !tile.swept && !tile.isMine).length\r\n    );\r\n    setBoard(newBoardState);\r\n    setGameStatus(\"inGame\");\r\n  };\r\n\r\n  const winGame = () => {\r\n    setGameStatus(\"wonGame\");\r\n  };\r\n\r\n  const loseGame = (id: number) => {\r\n    setGameStatus(\"lostGame\");\r\n    document\r\n      .querySelector(`.id-${id}`)\r\n      ?.setAttribute(\"style\", \"background: red\");\r\n    let newBoardState = [...board];\r\n    for (let t = 0; t < newBoardState.length; t++) {\r\n      if (newBoardState[t].isMine) newBoardState[t].swept = true;\r\n    }\r\n    setBoard(newBoardState);\r\n  };\r\n\r\n  const prepNewGame = () => {\r\n    setBoard(defaultBoardState);\r\n    setTilesRemaining(numOfRemainingTiles);\r\n    setGameStatus(\"preGame\");\r\n    setMessage(\r\n      localStorage.getItem(currentFormat)\r\n        ? `🏆 ${localStorage.getItem(currentFormat) + \"s\"}`\r\n        : \"🏆 none\"\r\n    );\r\n  };\r\n\r\n  const PreGameTiles = defaultBoardState.map((tile, i) => {\r\n    if (tile.c === 1) {\r\n      return (\r\n        <div\r\n          key={`pg-${i}`}\r\n          onContextMenu={(e) => {\r\n            e.preventDefault();\r\n          }}\r\n        >\r\n          {board.map((innerTile) => {\r\n            if (innerTile.r === i / numOfColumns + 1) {\r\n              return (\r\n                <div\r\n                  className=\"tile pre-game\"\r\n                  onClick={() => {\r\n                    startGame(innerTile.id);\r\n                  }}\r\n                  key={`pg-r${innerTile.r}c${innerTile.c}`}\r\n                />\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n\r\n  const Tiles = board.map((tile, i) => {\r\n    if (tile.c === 1) {\r\n      return (\r\n        <div key={i}>\r\n          {board.map((innerTile) => {\r\n            if (innerTile.r === i / numOfColumns + 1) {\r\n              return (\r\n                <Tile\r\n                  minesAround={innerTile.minesAround}\r\n                  isMine={innerTile.isMine}\r\n                  setTilesRemaining={setTilesRemaining}\r\n                  tilesRemaining={tilesRemaining}\r\n                  key={`r${innerTile.r}c${innerTile.c}`}\r\n                  swept={innerTile.swept}\r\n                  c={innerTile.c}\r\n                  r={innerTile.r}\r\n                  boardState={board}\r\n                  setBoardState={setBoard}\r\n                  floodFill={floodFill}\r\n                  id={innerTile.id}\r\n                  loseGame={loseGame}\r\n                  gameStatus={gameStatus}\r\n                  flagStatus={innerTile.flagStatus}\r\n                  flaggingMode={flaggingMode}\r\n                />\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {settingsPanelVisible && (\r\n        <SettingsPanel\r\n          flaggingMode={flaggingMode}\r\n          setFlaggingMode={setFlaggingMode}\r\n          setSettingsPanelVisible={setSettingsPanelVisible}\r\n        />\r\n      )}\r\n      <div className=\"container\">\r\n        <div className=\"controls\">\r\n          <span>{message}</span>\r\n\r\n          {gameStatus === \"wonGame\" && (\r\n            <div className=\"ms-button\" onClick={prepNewGame}>\r\n              {\"😎\"}\r\n            </div>\r\n          )}\r\n          {gameStatus === \"lostGame\" && (\r\n            <div className=\"ms-button\" onClick={prepNewGame}>\r\n              {\"😬\"}\r\n            </div>\r\n          )}\r\n          {gameStatus === \"preGame\" && (\r\n            <div\r\n              className=\"ms-button\"\r\n              onClick={() => {\r\n                setSettingsPanelVisible(true);\r\n              }}\r\n            >\r\n              {\"⚙️\"}\r\n            </div>\r\n          )}\r\n\r\n          <span style={{ textAlign: \"right\" }}>\r\n            <Timer\r\n              gameStatus={gameStatus}\r\n              setMessage={setMessage}\r\n              currentFormat={currentFormat}\r\n            />\r\n          </span>\r\n        </div>\r\n        <div\r\n          className={`board ${\r\n            (gameStatus === \"lostGame\" || gameStatus === \"wonGame\") &&\r\n            \"postGame\"\r\n          }`}\r\n        >\r\n          {gameStatus === \"preGame\" ? PreGameTiles : Tiles}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App.tsx\";\r\n// import reportWebVitals from \"./reportWebVitals\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}