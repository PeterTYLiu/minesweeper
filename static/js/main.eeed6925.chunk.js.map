{"version":3,"sources":["components/Tile/Tile.tsx","components/Timer/Timer.tsx","utilities/difficulties.js","components/SettingsPanel/SettingsPanel.tsx","utilities/floodFill.ts","App.tsx","serviceWorkerRegistration.ts","index.js"],"names":["Tile","tile","floodFill","boardState","setBoardState","loseGame","gameStatus","flaggingMode","chord","chordingEnabled","swept","isMine","minesAround","flagStatus","id","c","r","handleContextOrSwipe","newBoardState","swipeHandler","useSwipeable","onSwiped","TileContents","style","fontWeight","className","position","color","fontSize","paddingBottom","handleMouseDownOrTouchStart","e","type","button","chordableTilesIds","find","filter","map","forEach","document","querySelector","classList","add","handleMouseUpOrTouchEnd","querySelectorAll","remove","onMouseDown","onTouchStart","onMouseUp","onTouchEnd","onMouseLeave","onContextMenu","preventDefault","onClick","Timer","currentFormat","setMessage","useState","timeElapsed","setTimeElapsed","useEffect","timer","setInterval","Number","toFixed","clearInterval","console","log","prevRecordTime","localStorage","getItem","setItem","toString","includes","easy","name","mineRatio","medium","hard","SettingsPanel","setFlaggingMode","setSettingsPanelVisible","setMineRatio","setChordingEnabled","numOfRows","setNumOfRows","showPWAHint","a","navigator","getInstalledRelatedApps","installedRelatedApps","length","height","width","backgroundColor","display","placeItems","flexDirection","gap","background","maxWidth","borderRadius","padding","stopPropagation","justifyContent","alignItems","verticalAlign","opacity","cursor","undefined","difficulties","checked","onChange","newFlaggingMode","disabled","title","href","target","marginTop","clipboard","writeText","alert","triggerTile","tilesAround","App","numOfColumns","settingsPanelVisible","JSON","parse","generateNewBoardState","columns","rows","minePercentage","push","minesToPlace","Math","round","index","floor","random","boardStateTile","tileAround","defaultBoardState","setDefaultBoardState","setGameStatus","board","setBoard","message","winGame","arrOfIds","setAttribute","t","prepNewGame","tilesToSweep","minesSwept","PreGameTiles","i","innerTile","tileId","startGame","Tiles","textAlign","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.eeed6925.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useSwipeable } from \"react-swipeable\";\r\n// Typescript\r\nimport ITile from \"../../types/tile\";\r\nimport { gameStatuses } from \"../../types/gameStatuses\";\r\nimport { flaggingModes } from \"../../types/settings\";\r\n\r\ninterface TileProps {\r\n  tile: ITile;\r\n  floodFill(triggerTile: ITile, boardState: ITile[]): any;\r\n  boardState: ITile[];\r\n  setBoardState(arg0: ITile[]): any;\r\n  loseGame(arrOfIds: number[]): any;\r\n  gameStatus: gameStatuses;\r\n  flaggingMode: flaggingModes;\r\n  chord(triggerTile: ITile, boardState: ITile[]): any;\r\n  chordingEnabled: boolean;\r\n}\r\n\r\nexport default function Tile({\r\n  tile,\r\n  floodFill,\r\n  boardState,\r\n  setBoardState,\r\n  loseGame,\r\n  gameStatus,\r\n  flaggingMode,\r\n  chord,\r\n  chordingEnabled,\r\n}: TileProps) {\r\n  const { swept, isMine, minesAround, flagStatus, id, c, r } = tile;\r\n\r\n  const handleContextOrSwipe = () => {\r\n    if (!swept && flaggingMode === \"withoutMaybe\") {\r\n      const newBoardState = [...boardState];\r\n      newBoardState[id - 1].flagStatus =\r\n        flagStatus === \"flagged\" ? \"unflagged\" : \"flagged\";\r\n      return setBoardState(newBoardState);\r\n    }\r\n    if (chordingEnabled && swept && !isMine && minesAround) {\r\n      chord(tile, boardState);\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (flagStatus === \"unflagged\" && isMine && gameStatus === \"inGame\")\r\n      return loseGame([id]);\r\n    if (flagStatus === \"unflagged\" && !swept && gameStatus === \"inGame\") {\r\n      const newBoardState = [...boardState];\r\n      newBoardState[id - 1].swept = true;\r\n      if (minesAround === 0 && !isMine) {\r\n        floodFill(newBoardState[id - 1], newBoardState);\r\n      }\r\n      setBoardState(newBoardState);\r\n    }\r\n  };\r\n\r\n  const swipeHandler = useSwipeable({\r\n    onSwiped: () => {\r\n      handleContextOrSwipe();\r\n    },\r\n  });\r\n\r\n  const TileContents = (\r\n    <>\r\n      {((!swept && gameStatus === \"inGame\") || (swept && isMine)) &&\r\n      flagStatus === \"flagged\" ? (\r\n        <p style={{ fontWeight: \"normal\" }} className={flagStatus}>\r\n          🚩\r\n        </p>\r\n      ) : null}\r\n      {gameStatus !== \"inGame\" && !isMine && flagStatus === \"flagged\" ? (\r\n        <>\r\n          <p style={{ fontWeight: \"normal\" }} className={flagStatus}>\r\n            🚩\r\n          </p>\r\n          <span\r\n            style={{\r\n              position: \"absolute\",\r\n              color: \"white\",\r\n              fontSize: \"2.2rem\",\r\n              paddingBottom: \"2px\",\r\n            }}\r\n          >\r\n            🛇\r\n          </span>\r\n        </>\r\n      ) : null}\r\n      {!swept && flagStatus === \"maybe\" ? <p>❔</p> : null}\r\n      {gameStatus === \"inGame\" ? (\r\n        !isMine && minesAround && swept ? (\r\n          <p>{minesAround}</p>\r\n        ) : null\r\n      ) : isMine ? (\r\n        flagStatus !== \"flagged\" ? (\r\n          gameStatus === \"wonGame\" ? (\r\n            <p>🌼</p>\r\n          ) : (\r\n            <p>💣</p>\r\n          )\r\n        ) : gameStatus === \"wonGame\" ? (\r\n          <p>🌼</p>\r\n        ) : null\r\n      ) : minesAround && swept ? (\r\n        <p>{minesAround}</p>\r\n      ) : null}\r\n    </>\r\n  );\r\n\r\n  const handleMouseDownOrTouchStart = (e: any) => {\r\n    if (\r\n      (e.type === \"touchstart\" || e.button === 2) &&\r\n      swept &&\r\n      minesAround &&\r\n      chordingEnabled\r\n    ) {\r\n      let chordableTilesIds = [\r\n        boardState.find((tile) => tile.r === r && tile.c === c + 1),\r\n        boardState.find((tile) => tile.r === r && tile.c === c - 1),\r\n        boardState.find((tile) => tile.r === r + 1 && tile.c === c),\r\n        boardState.find((tile) => tile.r === r - 1 && tile.c === c),\r\n        boardState.find((tile) => tile.r === r + 1 && tile.c === c + 1),\r\n        boardState.find((tile) => tile.r === r - 1 && tile.c === c - 1),\r\n        boardState.find((tile) => tile.r === r + 1 && tile.c === c - 1),\r\n        boardState.find((tile) => tile.r === r - 1 && tile.c === c + 1),\r\n      ]\r\n        .filter((tile) => !tile?.swept && tile?.flagStatus === \"unflagged\")\r\n        .map((tile) => tile?.id);\r\n      chordableTilesIds.forEach((id) => {\r\n        document.querySelector(`.id-${id}`)?.classList.add(\"hover\");\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleMouseUpOrTouchEnd = () => {\r\n    if (chordingEnabled && swept && minesAround) {\r\n      const artificiallyHoveredTiles = document.querySelectorAll(\".hover\");\r\n      artificiallyHoveredTiles.forEach((tile) =>\r\n        tile.classList.remove(\"hover\")\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onMouseDown={(e) => handleMouseDownOrTouchStart(e)}\r\n      onTouchStart={(e) => handleMouseDownOrTouchStart(e)}\r\n      onMouseUp={handleMouseUpOrTouchEnd}\r\n      onTouchEnd={handleMouseUpOrTouchEnd}\r\n      onMouseLeave={handleMouseUpOrTouchEnd}\r\n      {...swipeHandler}\r\n      className={`tile id-${id} ${isMine ? \"mine\" : \"\"} ${\r\n        swept ? \"swept\" : \"\"\r\n      } around-${minesAround}`}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n        handleContextOrSwipe();\r\n      }}\r\n      onClick={handleClick}\r\n    >\r\n      {TileContents}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\ninterface TimerProps {\r\n  gameStatus: \"preGame\" | \"inGame\" | \"wonGame\" | \"lostGame\";\r\n  currentFormat: string;\r\n  setMessage(message: string): any;\r\n}\r\n\r\nexport default function Timer({\r\n  gameStatus,\r\n  currentFormat,\r\n  setMessage,\r\n}: TimerProps) {\r\n  const [timeElapsed, setTimeElapsed] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (gameStatus === \"inGame\") {\r\n      const timer = setInterval(() => {\r\n        setTimeElapsed(Number((timeElapsed + 0.1).toFixed(1)));\r\n      }, 100);\r\n\r\n      return () => clearInterval(timer);\r\n    }\r\n  }, [gameStatus, timeElapsed]);\r\n\r\n  useEffect(() => {\r\n    console.log(`The game status is ${gameStatus}`);\r\n\r\n    if (gameStatus === \"wonGame\") {\r\n      let prevRecordTime = localStorage.getItem(currentFormat);\r\n      if (!prevRecordTime || timeElapsed < Number(prevRecordTime)) {\r\n        localStorage.setItem(currentFormat, timeElapsed.toString());\r\n        setMessage(`🎉 New record!`);\r\n        console.log(`New record: ${timeElapsed}s`);\r\n      }\r\n    }\r\n    if (gameStatus === \"preGame\") {\r\n      setTimeElapsed(0);\r\n    }\r\n  }, [gameStatus]);\r\n\r\n  return (\r\n    <>\r\n      {timeElapsed.toString().includes(\".\")\r\n        ? timeElapsed\r\n        : timeElapsed.toString() + \".0\"}\r\n      s\r\n    </>\r\n  );\r\n}\r\n","export default {\r\n  easy: { name: \"easy\", mineRatio: 0.1 },\r\n  medium: { name: \"medium\", mineRatio: 0.175 },\r\n  hard: { name: \"hard\", mineRatio: 0.25 },\r\n};\r\n","import React from \"react\";\r\nimport { flaggingModes } from \"../../types/settings\";\r\nimport \"./SettingsPanel.css\";\r\nimport difficulties from \"../../utilities/difficulties\";\r\n\r\nconst versionAndDate = \"v1.6.1.2 (30/11/2021)\";\r\n\r\ninterface SettingsPanelProps {\r\n  flaggingMode: flaggingModes;\r\n  setFlaggingMode(flaggingMode: flaggingModes): any;\r\n  setSettingsPanelVisible(visibility: boolean): any;\r\n  setMineRatio(numOfMines: number): any;\r\n  mineRatio: number;\r\n  chordingEnabled: boolean;\r\n  setChordingEnabled(chording: boolean): any;\r\n  numOfRows: number;\r\n  setNumOfRows(rows: number): any;\r\n}\r\n\r\nexport default function SettingsPanel({\r\n  flaggingMode,\r\n  setFlaggingMode,\r\n  setSettingsPanelVisible,\r\n  setMineRatio,\r\n  mineRatio,\r\n  chordingEnabled,\r\n  setChordingEnabled,\r\n  numOfRows,\r\n  setNumOfRows,\r\n}: SettingsPanelProps) {\r\n  const handleChangeFlaggingMode = () => {\r\n    let newFlaggingMode = (\r\n      flaggingMode === \"off\" ? \"withoutMaybe\" : \"off\"\r\n    ) as flaggingModes;\r\n    setFlaggingMode(newFlaggingMode);\r\n    localStorage.setItem(\"flaggingMode\", newFlaggingMode);\r\n  };\r\n\r\n  const handleChangeChordingEnabled = () => {\r\n    if (chordingEnabled) {\r\n      setChordingEnabled(false);\r\n      localStorage.setItem(\"chordingEnabled\", \"false\");\r\n    }\r\n    if (!chordingEnabled) {\r\n      setChordingEnabled(true);\r\n      localStorage.setItem(\"chordingEnabled\", \"true\");\r\n    }\r\n  };\r\n\r\n  let showPWAHint = true;\r\n  (async () => {\r\n    let installedRelatedApps = await (\r\n      navigator as any\r\n    ).getInstalledRelatedApps();\r\n    if (await installedRelatedApps.length) showPWAHint = false;\r\n  })();\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"fixed\",\r\n        height: \"100%\",\r\n        width: \"100vw\",\r\n        backgroundColor: \"#00000088\",\r\n        display: \"grid\",\r\n        placeItems: \"center\",\r\n      }}\r\n      onClick={() => {\r\n        setSettingsPanelVisible(false);\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          gap: \"20px\",\r\n          background: \"white\",\r\n          maxWidth: \"370px\",\r\n          width: \"92%\",\r\n          borderRadius: \"4px\",\r\n          padding: \"24px\",\r\n        }}\r\n        className=\"settings-panel\"\r\n        onClick={(e) => {\r\n          e.stopPropagation();\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n            verticalAlign: \"baseline\",\r\n          }}\r\n        >\r\n          <h2>Settings</h2>\r\n          <h2\r\n            style={{ opacity: \"0.4\", cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setSettingsPanelVisible(false);\r\n            }}\r\n          >\r\n            ✖️\r\n          </h2>\r\n        </div>\r\n        <hr />\r\n        <div>\r\n          <div className=\"selector\">\r\n            <div\r\n              className={numOfRows === 17 ? \"selected\" : undefined}\r\n              onClick={() => {\r\n                setNumOfRows(17);\r\n                localStorage.setItem(\"numOfRows\", \"17\");\r\n              }}\r\n            >\r\n              <h3>17{numOfRows === 17 && \" rows\"}</h3>\r\n            </div>\r\n            <div\r\n              className={numOfRows === 18 ? \"selected\" : undefined}\r\n              onClick={() => {\r\n                setNumOfRows(18);\r\n                localStorage.setItem(\"numOfRows\", \"18\");\r\n              }}\r\n            >\r\n              <h3>18{numOfRows === 18 && \" rows\"}</h3>\r\n            </div>\r\n            <div\r\n              className={numOfRows === 19 ? \"selected\" : undefined}\r\n              onClick={() => {\r\n                setNumOfRows(19);\r\n                localStorage.setItem(\"numOfRows\", \"19\");\r\n              }}\r\n            >\r\n              <h3>19{numOfRows === 19 && \" rows\"}</h3>\r\n            </div>\r\n            <div\r\n              className={numOfRows === 20 ? \"selected\" : undefined}\r\n              onClick={() => {\r\n                setNumOfRows(20);\r\n                localStorage.setItem(\"numOfRows\", \"20\");\r\n              }}\r\n            >\r\n              <h3>20{numOfRows === 20 && \" rows\"}</h3>\r\n            </div>\r\n          </div>\r\n          <div className=\"selector\">\r\n            <div\r\n              className={\r\n                mineRatio === difficulties.easy.mineRatio\r\n                  ? \"selected\"\r\n                  : undefined\r\n              }\r\n              onClick={() => {\r\n                setMineRatio(difficulties.easy.mineRatio);\r\n                localStorage.setItem(\r\n                  \"mineRatio\",\r\n                  difficulties.easy.mineRatio.toString()\r\n                );\r\n              }}\r\n            >\r\n              <h3>Easy</h3>\r\n              <p>10% mines</p>\r\n            </div>\r\n            <div\r\n              className={\r\n                mineRatio === difficulties.medium.mineRatio\r\n                  ? \"selected\"\r\n                  : undefined\r\n              }\r\n              onClick={() => {\r\n                setMineRatio(difficulties.medium.mineRatio);\r\n                localStorage.setItem(\r\n                  \"mineRatio\",\r\n                  difficulties.medium.mineRatio.toString()\r\n                );\r\n              }}\r\n            >\r\n              <h3>Medium</h3>\r\n              <p>17% mines</p>\r\n            </div>\r\n            <div\r\n              className={\r\n                mineRatio === difficulties.hard.mineRatio\r\n                  ? \"selected\"\r\n                  : undefined\r\n              }\r\n              onClick={() => {\r\n                setMineRatio(difficulties.hard.mineRatio);\r\n                localStorage.setItem(\r\n                  \"mineRatio\",\r\n                  difficulties.hard.mineRatio.toString()\r\n                );\r\n              }}\r\n            >\r\n              <h3>Hard</h3>\r\n              <p>25% mines</p>\r\n            </div>\r\n          </div>\r\n          <p>\r\n            Best time on {numOfRows} rows &amp;{\" \"}\r\n            {mineRatio === difficulties.hard.mineRatio && \"hard\"}\r\n            {mineRatio === difficulties.medium.mineRatio && \"medium\"}\r\n            {mineRatio === difficulties.easy.mineRatio && \"easy\"}:{\" \"}\r\n            {localStorage.getItem(`10x${numOfRows}x${mineRatio}m`) ? (\r\n              <strong>\r\n                {localStorage.getItem(`10x${numOfRows}x${mineRatio}m`) + \"s\"}\r\n              </strong>\r\n            ) : (\r\n              \"none\"\r\n            )}\r\n          </p>\r\n        </div>\r\n        <hr />\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={flaggingMode === \"off\" ? false : true}\r\n            onChange={handleChangeFlaggingMode}\r\n          />\r\n          <div>\r\n            <h3>Flagging</h3>\r\n            <p>Swipe or right-click a tile to flag it</p>\r\n          </div>\r\n        </label>\r\n\r\n        <hr />\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={chordingEnabled}\r\n            onChange={handleChangeChordingEnabled}\r\n            disabled={flaggingMode === \"off\" ? true : false}\r\n            title={\r\n              flaggingMode === \"off\"\r\n                ? \"Requires flagging to be enabled\"\r\n                : undefined\r\n            }\r\n          />\r\n          <div>\r\n            <h3>Chording</h3>\r\n            <p>\r\n              Swipe or right-click a swept tile to sweep all adjacent tiles (if\r\n              the right number of adjacent mines have been flagged).\r\n            </p>\r\n          </div>\r\n        </label>\r\n\r\n        <hr />\r\n        {showPWAHint ? (\r\n          <>\r\n            <p>\r\n              This is a{\" \"}\r\n              <a\r\n                href=\"https://mobilesyrup.com/2020/05/24/how-install-progressive-web-app-pwa-android-ios-pc-mac/\"\r\n                target=\"_blank\"\r\n              >\r\n                progressive web app\r\n              </a>\r\n              . For the best minesweeping experience and offline play, install\r\n              this app on your device.\r\n            </p>\r\n            <hr />\r\n          </>\r\n        ) : null}\r\n        <div>\r\n          <p>\r\n            Made with ❤️ by{\" \"}\r\n            <a href=\"https://www.linkedin.com/in/peter-ty-liu/\" target=\"_blank\">\r\n              PL\r\n            </a>\r\n          </p>\r\n          <p style={{ fontSize: \"14px\", marginTop: \"14px\" }}>\r\n            Enjoying the game?{\" \"}\r\n            <a\r\n              href=\"\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                navigator.clipboard.writeText(\r\n                  \"3AncbaTiG8qT7Lq2XhoXYGzMB4mpsGUCJ6\"\r\n                );\r\n                alert(\"Bitcoin address copied to clipboard\");\r\n              }}\r\n            >\r\n              Buy me a cup of coffee\r\n            </a>{\" \"}\r\n            :)\r\n          </p>\r\n          <p style={{ fontSize: \"14px\", opacity: \"0.5\", marginTop: \"14px\" }}>\r\n            {versionAndDate}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import ITile from \"../types/tile\";\r\n\r\nexport default function floodFill(triggerTile: ITile, boardState: ITile[]) {\r\n  const { r, c } = triggerTile;\r\n  let tilesAround = [\r\n    boardState.find((tile) => tile.r === r && tile.c === c + 1),\r\n    boardState.find((tile) => tile.r === r && tile.c === c - 1),\r\n    boardState.find((tile) => tile.r === r + 1 && tile.c === c),\r\n    boardState.find((tile) => tile.r === r - 1 && tile.c === c),\r\n    boardState.find((tile) => tile.r === r + 1 && tile.c === c + 1),\r\n    boardState.find((tile) => tile.r === r - 1 && tile.c === c - 1),\r\n    boardState.find((tile) => tile.r === r + 1 && tile.c === c - 1),\r\n    boardState.find((tile) => tile.r === r - 1 && tile.c === c + 1),\r\n  ].filter((tile) => tile?.id && !tile?.swept);\r\n  tilesAround.forEach((tile) => {\r\n    if (tile && tile.flagStatus === \"unflagged\")\r\n      boardState[tile.id - 1].swept = true;\r\n    if (tile?.minesAround === 0 && tilesAround.length > 0) {\r\n      floodFill(tile, boardState);\r\n    }\r\n  });\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport Tile from \"./components/Tile\";\r\nimport Timer from \"./components/Timer\";\r\nimport SettingsPanel from \"./components/SettingsPanel\";\r\nimport \"./App.css\";\r\n// Typescript\r\nimport ITile from \"./types/tile\";\r\nimport { gameStatuses } from \"./types/gameStatuses\";\r\nimport { flaggingModes } from \"./types/settings\";\r\n// UTility functions\r\nimport floodFill from \"./utilities/floodFill\";\r\n\r\nfunction App() {\r\n  //defaults\r\n  let defaultNumOfRows = 17;\r\n  let numOfColumns = 10;\r\n  let defaultMineRatio = 0.175;\r\n  // Settings\r\n  const [numOfRows, setNumOfRows] = useState(\r\n    localStorage.getItem(\"numOfRows\")\r\n      ? Number(localStorage.getItem(\"numOfRows\"))\r\n      : defaultNumOfRows\r\n  );\r\n  const [settingsPanelVisible, setSettingsPanelVisible] = useState(false);\r\n  const [mineRatio, setMineRatio] = useState(\r\n    localStorage.getItem(\"mineRatio\")\r\n      ? Number(localStorage.getItem(\"mineRatio\"))\r\n      : defaultMineRatio\r\n  );\r\n  const [flaggingMode, setFlaggingMode] = useState<flaggingModes>(\r\n    (localStorage.getItem(\"flaggingMode\") as flaggingModes) || \"off\"\r\n  );\r\n  const [chordingEnabled, setChordingEnabled] = useState(\r\n    localStorage.getItem(\"chordingEnabled\")\r\n      ? (JSON.parse(\r\n          localStorage.getItem(\"chordingEnabled\") as string\r\n        ) as boolean)\r\n      : false\r\n  );\r\n\r\n  // If no flagging, disable chording\r\n\r\n  useEffect(() => {\r\n    if (flaggingMode === \"off\") setChordingEnabled(false);\r\n  }, [flaggingMode]);\r\n\r\n  // Utility functions\r\n\r\n  function generateNewBoardState(\r\n    columns = numOfColumns,\r\n    rows = numOfRows,\r\n    minePercentage = mineRatio\r\n  ) {\r\n    let boardState: ITile[] = [];\r\n    for (let r = 1; r <= rows; r++) {\r\n      for (let c = 1; c <= columns; c++) {\r\n        boardState.push({\r\n          c,\r\n          r,\r\n          isMine: false,\r\n          id: c + (r - 1) * columns,\r\n          swept: false,\r\n          flagStatus: \"unflagged\",\r\n          minesAround: 0,\r\n        });\r\n      }\r\n    }\r\n    let minesToPlace = Math.round(columns * rows * minePercentage);\r\n    while (minesToPlace > 0) {\r\n      let index = Math.floor(Math.random() * rows * columns);\r\n      if (!boardState[index].isMine) {\r\n        boardState[index].isMine = true;\r\n        minesToPlace--;\r\n      }\r\n    }\r\n    boardState.forEach((boardStateTile) => {\r\n      let { r, c } = boardStateTile;\r\n      boardStateTile.minesAround = [\r\n        boardState.find((tile) => tile.r === r && tile.c === c + 1),\r\n        boardState.find((tile) => tile.r === r && tile.c === c - 1),\r\n        boardState.find((tile) => tile.r === r + 1 && tile.c === c),\r\n        boardState.find((tile) => tile.r === r - 1 && tile.c === c),\r\n        boardState.find((tile) => tile.r === r + 1 && tile.c === c + 1),\r\n        boardState.find((tile) => tile.r === r - 1 && tile.c === c - 1),\r\n        boardState.find((tile) => tile.r === r + 1 && tile.c === c - 1),\r\n        boardState.find((tile) => tile.r === r - 1 && tile.c === c + 1),\r\n      ].filter((tileAround) => tileAround?.isMine).length;\r\n    });\r\n\r\n    return boardState;\r\n  }\r\n\r\n  // Game state\r\n  const [defaultBoardState, setDefaultBoardState] = useState(\r\n    generateNewBoardState(numOfColumns, numOfRows, mineRatio)\r\n  );\r\n\r\n  const [gameStatus, setGameStatus] = useState<gameStatuses>(\"preGame\");\r\n  const [board, setBoard] = useState<ITile[]>(defaultBoardState);\r\n  const [message, setMessage] = useState(\r\n    localStorage.getItem(`${numOfColumns}x${numOfRows}x${mineRatio}m`)\r\n      ? `🏆 ${\r\n          localStorage.getItem(`${numOfColumns}x${numOfRows}x${mineRatio}m`) +\r\n          \"s\"\r\n        }`\r\n      : \"🏆 none\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    setMessage(\r\n      localStorage.getItem(`${numOfColumns}x${numOfRows}x${mineRatio}m`)\r\n        ? `🏆 ${\r\n            localStorage.getItem(`${numOfColumns}x${numOfRows}x${mineRatio}m`) +\r\n            \"s\"\r\n          }`\r\n        : \"🏆 none\"\r\n    );\r\n  }, [mineRatio, numOfRows]);\r\n\r\n  // Update initial board when rows change\r\n\r\n  useEffect(() => {\r\n    setDefaultBoardState(generateNewBoardState());\r\n  }, [numOfRows]);\r\n\r\n  // Win the game when all the tiles have been cleared\r\n\r\n  useEffect(() => {\r\n    if (\r\n      gameStatus === \"inGame\" &&\r\n      board.filter((tile) => tile.swept).length ===\r\n        numOfRows * numOfColumns -\r\n          Math.round(numOfColumns * numOfRows * mineRatio)\r\n    )\r\n      winGame();\r\n  }, [board]);\r\n\r\n  // Game functions\r\n\r\n  const startGame = (tileId: number) => {\r\n    let newBoardState = generateNewBoardState();\r\n    while (\r\n      newBoardState[tileId - 1].isMine ||\r\n      newBoardState[tileId - 1].minesAround !== 0\r\n    ) {\r\n      newBoardState = generateNewBoardState();\r\n    }\r\n\r\n    newBoardState[tileId - 1].swept = true;\r\n\r\n    floodFill(newBoardState[tileId - 1], newBoardState);\r\n    setBoard(newBoardState);\r\n    setGameStatus(\"inGame\");\r\n  };\r\n\r\n  const winGame = () => {\r\n    setGameStatus(\"wonGame\");\r\n  };\r\n\r\n  function loseGame(arrOfIds: number[]) {\r\n    setGameStatus(\"lostGame\");\r\n    arrOfIds.forEach((id) => {\r\n      document\r\n        .querySelector(`.id-${id}`)\r\n        ?.setAttribute(\"style\", \"background: red\");\r\n    });\r\n    let newBoardState = [...board];\r\n    for (let t = 0; t < newBoardState.length; t++) {\r\n      if (newBoardState[t].isMine) newBoardState[t].swept = true;\r\n    }\r\n    setBoard(newBoardState);\r\n  }\r\n\r\n  const prepNewGame = () => {\r\n    setBoard(defaultBoardState);\r\n    setGameStatus(\"preGame\");\r\n    setMessage(\r\n      localStorage.getItem(`${numOfColumns}x${numOfRows}x${mineRatio}m`)\r\n        ? `🏆 ${\r\n            localStorage.getItem(`${numOfColumns}x${numOfRows}x${mineRatio}m`) +\r\n            \"s\"\r\n          }`\r\n        : \"🏆 none\"\r\n    );\r\n  };\r\n\r\n  const chord = (triggerTile: ITile, boardState: ITile[]) => {\r\n    let newBoardState = [...boardState];\r\n    const { r, c, minesAround } = triggerTile;\r\n\r\n    let numOfAdjacentFlaggedTiles = [\r\n      newBoardState.find((tile) => tile.r === r && tile.c === c + 1),\r\n      newBoardState.find((tile) => tile.r === r && tile.c === c - 1),\r\n      newBoardState.find((tile) => tile.r === r + 1 && tile.c === c),\r\n      newBoardState.find((tile) => tile.r === r - 1 && tile.c === c),\r\n      newBoardState.find((tile) => tile.r === r + 1 && tile.c === c + 1),\r\n      newBoardState.find((tile) => tile.r === r - 1 && tile.c === c - 1),\r\n      newBoardState.find((tile) => tile.r === r + 1 && tile.c === c - 1),\r\n      newBoardState.find((tile) => tile.r === r - 1 && tile.c === c + 1),\r\n    ].filter((tile) => tile?.flagStatus === \"flagged\").length;\r\n\r\n    if (minesAround !== numOfAdjacentFlaggedTiles) return;\r\n\r\n    // Chording is a go-go!\r\n\r\n    let tilesToSweep = [\r\n      newBoardState.find((tile) => tile.r === r && tile.c === c + 1),\r\n      newBoardState.find((tile) => tile.r === r && tile.c === c - 1),\r\n      newBoardState.find((tile) => tile.r === r + 1 && tile.c === c),\r\n      newBoardState.find((tile) => tile.r === r - 1 && tile.c === c),\r\n      newBoardState.find((tile) => tile.r === r + 1 && tile.c === c + 1),\r\n      newBoardState.find((tile) => tile.r === r - 1 && tile.c === c - 1),\r\n      newBoardState.find((tile) => tile.r === r + 1 && tile.c === c - 1),\r\n      newBoardState.find((tile) => tile.r === r - 1 && tile.c === c + 1),\r\n    ].filter((tile) => !tile?.swept && tile?.flagStatus === \"unflagged\");\r\n\r\n    let minesSwept = tilesToSweep\r\n      .filter((tile) => tile?.isMine)\r\n      .map((tile) => tile?.id);\r\n\r\n    if (minesSwept.length) return loseGame(minesSwept as number[]);\r\n\r\n    tilesToSweep.forEach((tile) => {\r\n      if (tile) {\r\n        tile.swept = true;\r\n      }\r\n      if (tile?.minesAround === 0) {\r\n        floodFill(tile, newBoardState);\r\n      }\r\n    });\r\n\r\n    setBoard(newBoardState);\r\n  };\r\n\r\n  // Board UI\r\n\r\n  const PreGameTiles = defaultBoardState.map((tile, i) => {\r\n    if (tile.c === 1) {\r\n      return (\r\n        <div\r\n          key={`pg-${i}`}\r\n          onContextMenu={(e) => {\r\n            e.preventDefault();\r\n          }}\r\n        >\r\n          {defaultBoardState.map((innerTile) => {\r\n            if (innerTile.r === i / numOfColumns + 1) {\r\n              return (\r\n                <div\r\n                  className=\"tile pre-game\"\r\n                  onClick={() => {\r\n                    startGame(innerTile.id);\r\n                  }}\r\n                  key={`pg-r${innerTile.r}c${innerTile.c}`}\r\n                />\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n\r\n  const Tiles = board.map((tile, i) => {\r\n    if (tile.c === 1) {\r\n      return (\r\n        <div key={i}>\r\n          {board.map((innerTile) => {\r\n            if (innerTile.r === i / numOfColumns + 1) {\r\n              return (\r\n                <Tile\r\n                  tile={innerTile}\r\n                  chord={chord}\r\n                  key={`r${innerTile.r}c${innerTile.c}`}\r\n                  boardState={board}\r\n                  setBoardState={setBoard}\r\n                  floodFill={floodFill}\r\n                  loseGame={loseGame}\r\n                  gameStatus={gameStatus}\r\n                  flaggingMode={flaggingMode}\r\n                  chordingEnabled={chordingEnabled}\r\n                />\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {settingsPanelVisible && (\r\n        <SettingsPanel\r\n          flaggingMode={flaggingMode}\r\n          setFlaggingMode={setFlaggingMode}\r\n          setSettingsPanelVisible={setSettingsPanelVisible}\r\n          setMineRatio={setMineRatio}\r\n          mineRatio={mineRatio}\r\n          chordingEnabled={chordingEnabled}\r\n          setChordingEnabled={setChordingEnabled}\r\n          numOfRows={numOfRows}\r\n          setNumOfRows={setNumOfRows}\r\n        />\r\n      )}\r\n      <div className=\"container\">\r\n        <div className=\"controls\">\r\n          <span>{message}</span>\r\n\r\n          {gameStatus === \"wonGame\" && (\r\n            <div className=\"ms-button\" onClick={prepNewGame}>\r\n              {\"😎\"}\r\n            </div>\r\n          )}\r\n          {gameStatus === \"lostGame\" && (\r\n            <div className=\"ms-button\" onClick={prepNewGame}>\r\n              {\"😬\"}\r\n            </div>\r\n          )}\r\n          {gameStatus === \"inGame\" && (\r\n            <span style={{ width: \"auto\" }}>\r\n              💣{\" \"}\r\n              {Math.round(numOfColumns * numOfRows * mineRatio) -\r\n                board.filter((tile) => tile.flagStatus === \"flagged\").length}\r\n            </span>\r\n          )}\r\n          {gameStatus === \"preGame\" && (\r\n            <div\r\n              className=\"ms-button\"\r\n              onClick={() => {\r\n                setSettingsPanelVisible(true);\r\n              }}\r\n            >\r\n              {\"⚙️\"}\r\n            </div>\r\n          )}\r\n\r\n          <span style={{ textAlign: \"right\" }}>\r\n            <Timer\r\n              gameStatus={gameStatus}\r\n              setMessage={setMessage}\r\n              currentFormat={`${numOfColumns}x${numOfRows}x${mineRatio}m`}\r\n            />\r\n          </span>\r\n        </div>\r\n        <div\r\n          className={`board ${\r\n            (gameStatus === \"lostGame\" || gameStatus === \"wonGame\") &&\r\n            \"postGame\"\r\n          }`}\r\n        >\r\n          {gameStatus === \"preGame\" ? PreGameTiles : Tiles}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App.tsx\";\r\n// import reportWebVitals from \"./reportWebVitals\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}