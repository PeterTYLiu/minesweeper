{"version":3,"sources":["components/Tile/Tile.tsx","components/Timer/Timer.tsx","App.tsx","serviceWorkerRegistration.ts","index.js"],"names":["Tile","isMine","minesAround","swept","setTilesRemaining","tilesRemaining","floodFill","boardState","setBoardState","id","flagStatus","loseGame","gameStatus","toggleFlagStatus","newBoardState","swipeHandler","useSwipeable","onSwiped","TileContents","style","fontWeight","className","position","color","fontSize","paddingBottom","onContextMenu","e","preventDefault","onClick","filter","tile","length","Timer","currentFormat","setMessage","useState","timeElapsed","setTimeElapsed","useEffect","timer","setInterval","Number","toFixed","clearInterval","console","log","prevRecordTime","localStorage","getItem","setItem","toString","includes","App","numOfColumns","generateNewBoardState","columns","rows","mines","r","c","push","minesToPlace","index","Math","floor","random","forEach","boardStateTile","find","tileAround","triggerTile","tilesAround","defaultBoardState","numOfRows","setGameStatus","board","setBoard","message","winGame","document","querySelector","setAttribute","t","prepNewGame","PreGameTiles","map","i","innerTile","tileId","startGame","Tiles","alert","textAlign","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2906e475.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useSwipeable } from \"react-swipeable\";\r\n// Typescript\r\nimport ITile from \"../../types/tile\";\r\nimport { gameStatuses } from \"../../types/gameStatuses\";\r\n\r\ninterface TileProps extends ITile {\r\n  tilesRemaining: number;\r\n  setTilesRemaining(arg0: number): any;\r\n  floodFill(triggerTile: ITile, boardState: ITile[]): any;\r\n  boardState: ITile[];\r\n  setBoardState(arg0: ITile[]): any;\r\n  loseGame(id: number): any;\r\n  gameStatus: gameStatuses;\r\n}\r\n\r\nexport default function Tile({\r\n  isMine,\r\n  minesAround,\r\n  swept,\r\n  setTilesRemaining,\r\n  tilesRemaining,\r\n  floodFill,\r\n  boardState,\r\n  setBoardState,\r\n  id,\r\n  flagStatus,\r\n  loseGame,\r\n  gameStatus,\r\n}: TileProps) {\r\n  const toggleFlagStatus = () => {\r\n    if (!swept) {\r\n      const newBoardState = [...boardState];\r\n      newBoardState[id - 1].flagStatus =\r\n        flagStatus == \"flagged\" ? \"unflagged\" : \"flagged\";\r\n      setBoardState(newBoardState);\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (flagStatus == \"unflagged\" && isMine && gameStatus == \"inGame\")\r\n      return loseGame(id);\r\n    if (flagStatus == \"unflagged\" && !swept && gameStatus == \"inGame\") {\r\n      const newBoardState = [...boardState];\r\n      newBoardState[id - 1].swept = true;\r\n      setTilesRemaining(tilesRemaining - 1);\r\n      // If minesAround == 0, initiate a flood fill on all contiguous 0s and their perimeter\r\n      if (minesAround == 0 && !isMine) {\r\n        floodFill(newBoardState[id - 1], newBoardState);\r\n        setTilesRemaining(\r\n          newBoardState.filter((tile) => !tile.swept && !tile.isMine).length\r\n        );\r\n      }\r\n      setBoardState(newBoardState);\r\n    }\r\n  };\r\n\r\n  const swipeHandler = useSwipeable({\r\n    onSwiped: () => toggleFlagStatus(),\r\n  });\r\n\r\n  const TileContents = (\r\n    <>\r\n      {((!swept && gameStatus == \"inGame\") || (swept && isMine)) &&\r\n      flagStatus == \"flagged\" ? (\r\n        <p style={{ fontWeight: \"normal\" }} className={flagStatus}>\r\n          🚩\r\n        </p>\r\n      ) : null}\r\n      {gameStatus !== \"inGame\" && !isMine && flagStatus == \"flagged\" ? (\r\n        <>\r\n          <p style={{ fontWeight: \"normal\" }} className={flagStatus}>\r\n            🚩\r\n          </p>\r\n          <span\r\n            style={{\r\n              position: \"absolute\",\r\n              color: \"white\",\r\n              fontSize: \"2.2rem\",\r\n              paddingBottom: \"2px\",\r\n            }}\r\n          >\r\n            🛇\r\n          </span>\r\n        </>\r\n      ) : null}\r\n      {!swept && flagStatus == \"maybe\" ? <p>❔</p> : null}\r\n      {gameStatus == \"inGame\" ? (\r\n        !isMine && minesAround && swept ? (\r\n          <p>{minesAround}</p>\r\n        ) : null\r\n      ) : isMine ? (\r\n        flagStatus !== \"flagged\" ? (\r\n          gameStatus == \"wonGame\" ? (\r\n            <p>🌼</p>\r\n          ) : (\r\n            <p>💣</p>\r\n          )\r\n        ) : null\r\n      ) : minesAround && swept ? (\r\n        <p>{minesAround}</p>\r\n      ) : null}\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div\r\n      {...swipeHandler}\r\n      className={`tile id-${id} ${isMine ? \"mine\" : \"\"} ${\r\n        swept ? \"swept\" : \"\"\r\n      } around-${minesAround}`}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n        toggleFlagStatus();\r\n      }}\r\n      onClick={handleClick}\r\n    >\r\n      {TileContents}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\ninterface TimerProps {\r\n  gameStatus: \"preGame\" | \"inGame\" | \"wonGame\" | \"lostGame\";\r\n  currentFormat: string;\r\n  setMessage(message: string): any;\r\n}\r\n\r\nexport default function Timer({\r\n  gameStatus,\r\n  currentFormat,\r\n  setMessage,\r\n}: TimerProps) {\r\n  const [timeElapsed, setTimeElapsed] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (gameStatus == \"inGame\") {\r\n      const timer = setInterval(() => {\r\n        setTimeElapsed(Number((timeElapsed + 0.1).toFixed(1)));\r\n      }, 100);\r\n\r\n      return () => clearInterval(timer);\r\n    }\r\n  }, [gameStatus, timeElapsed]);\r\n\r\n  useEffect(() => {\r\n    console.log(`The game status is ${gameStatus}`);\r\n\r\n    if (gameStatus == \"wonGame\") {\r\n      let prevRecordTime = localStorage.getItem(currentFormat);\r\n      if (!prevRecordTime || timeElapsed < Number(prevRecordTime)) {\r\n        localStorage.setItem(currentFormat, timeElapsed.toString());\r\n        setMessage(`🎉 New record!`);\r\n        console.log(`New record: ${timeElapsed}s`);\r\n      }\r\n    }\r\n    if (gameStatus == \"preGame\") {\r\n      setTimeElapsed(0);\r\n    }\r\n  }, [gameStatus]);\r\n\r\n  return (\r\n    <>\r\n      {timeElapsed.toString().includes(\".\")\r\n        ? timeElapsed\r\n        : timeElapsed.toString() + \".0\"}\r\n      s\r\n    </>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport Tile from \"./components/Tile\";\r\nimport Timer from \"./components/Timer\";\r\nimport \"./App.css\";\r\n// Typescript\r\nimport ITile from \"./types/tile\";\r\nimport { gameStatuses } from \"./types/gameStatuses\";\r\n\r\nfunction App() {\r\n  let numOfRows = 20; //20;\r\n  let numOfColumns = 10; //10;\r\n  let numOfMines = 35; //35;\r\n  let currentFormat = `${numOfColumns}x${numOfRows}x${numOfMines}m`;\r\n  let numOfRemainingTiles = numOfRows * numOfColumns - numOfMines;\r\n  let alertMessage = `New in version 1.2:\r\n  • Right-click or swipe a tile to flag it!\r\n\r\n  Coming soon:\r\n  • Chording\r\n  • Adjustable difficulty\r\n  • \"Maybe\" state for flagging\r\n  \r\n  Made with ❤️ by PL`;\r\n\r\n  // Utility functions\r\n\r\n  function generateNewBoardState(\r\n    columns = numOfColumns,\r\n    rows = numOfRows,\r\n    mines = numOfMines\r\n  ) {\r\n    let boardState: ITile[] = [];\r\n    for (let r = 1; r <= rows; r++) {\r\n      for (let c = 1; c <= columns; c++) {\r\n        boardState.push({\r\n          c,\r\n          r,\r\n          isMine: false,\r\n          id: c + (r - 1) * columns,\r\n          swept: false,\r\n          flagStatus: \"unflagged\",\r\n          minesAround: 0,\r\n        });\r\n      }\r\n    }\r\n    let minesToPlace = mines;\r\n    while (minesToPlace > 0) {\r\n      let index = Math.floor(Math.random() * rows * columns);\r\n      if (!boardState[index].isMine) {\r\n        boardState[index].isMine = true;\r\n        minesToPlace--;\r\n      }\r\n    }\r\n    boardState.forEach((boardStateTile) => {\r\n      let { r, c } = boardStateTile;\r\n      boardStateTile.minesAround = [\r\n        boardState.find((tile) => tile.r == r && tile.c == c + 1),\r\n        boardState.find((tile) => tile.r == r && tile.c == c - 1),\r\n        boardState.find((tile) => tile.r == r + 1 && tile.c == c),\r\n        boardState.find((tile) => tile.r == r - 1 && tile.c == c),\r\n        boardState.find((tile) => tile.r == r + 1 && tile.c == c + 1),\r\n        boardState.find((tile) => tile.r == r - 1 && tile.c == c - 1),\r\n        boardState.find((tile) => tile.r == r + 1 && tile.c == c - 1),\r\n        boardState.find((tile) => tile.r == r - 1 && tile.c == c + 1),\r\n      ].filter((tileAround) => tileAround?.isMine).length;\r\n    });\r\n\r\n    return boardState;\r\n  }\r\n\r\n  function floodFill(triggerTile: ITile, boardState: ITile[]) {\r\n    const { r, c } = triggerTile;\r\n    let tilesAround = [\r\n      boardState.find((tile) => tile.r == r && tile.c == c + 1),\r\n      boardState.find((tile) => tile.r == r && tile.c == c - 1),\r\n      boardState.find((tile) => tile.r == r + 1 && tile.c == c),\r\n      boardState.find((tile) => tile.r == r - 1 && tile.c == c),\r\n      boardState.find((tile) => tile.r == r + 1 && tile.c == c + 1),\r\n      boardState.find((tile) => tile.r == r - 1 && tile.c == c - 1),\r\n      boardState.find((tile) => tile.r == r + 1 && tile.c == c - 1),\r\n      boardState.find((tile) => tile.r == r - 1 && tile.c == c + 1),\r\n    ].filter((tile) => tile?.id && !tile?.swept);\r\n    tilesAround.forEach((tile) => {\r\n      if (tile) boardState[tile.id - 1].swept = true;\r\n      if (tile?.minesAround == 0 && tilesAround.length > 0) {\r\n        floodFill(tile, boardState);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Game state\r\n  const defaultBoardState = generateNewBoardState();\r\n\r\n  const [tilesRemaining, setTilesRemaining] = useState(numOfRemainingTiles);\r\n  const [gameStatus, setGameStatus] = useState<gameStatuses>(\"preGame\");\r\n  const [board, setBoard] = useState<ITile[]>(defaultBoardState);\r\n  const [message, setMessage] = useState(\r\n    localStorage.getItem(currentFormat)\r\n      ? `🏆 ${localStorage.getItem(currentFormat) + \"s\"}`\r\n      : \"🏆 none\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (tilesRemaining == 0) winGame();\r\n  }, [tilesRemaining]);\r\n\r\n  const startGame = (tileId: number) => {\r\n    let newBoardState = generateNewBoardState();\r\n    while (\r\n      newBoardState[tileId - 1].isMine ||\r\n      newBoardState[tileId - 1].minesAround != 0\r\n    ) {\r\n      newBoardState = generateNewBoardState();\r\n    }\r\n\r\n    newBoardState[tileId - 1].swept = true;\r\n\r\n    floodFill(newBoardState[tileId - 1], newBoardState);\r\n    setTilesRemaining(\r\n      newBoardState.filter((tile) => !tile.swept && !tile.isMine).length\r\n    );\r\n    setBoard(newBoardState);\r\n    setGameStatus(\"inGame\");\r\n  };\r\n\r\n  const winGame = () => {\r\n    setGameStatus(\"wonGame\");\r\n  };\r\n\r\n  const loseGame = (id: number) => {\r\n    setGameStatus(\"lostGame\");\r\n    document\r\n      .querySelector(`.id-${id}`)\r\n      ?.setAttribute(\"style\", \"background: red\");\r\n    let newBoardState = [...board];\r\n    for (let t = 0; t < newBoardState.length; t++) {\r\n      if (newBoardState[t].isMine) newBoardState[t].swept = true;\r\n    }\r\n    setBoard(newBoardState);\r\n  };\r\n\r\n  const prepNewGame = () => {\r\n    setBoard(defaultBoardState);\r\n    setTilesRemaining(numOfRemainingTiles);\r\n    setGameStatus(\"preGame\");\r\n    setMessage(\r\n      localStorage.getItem(currentFormat)\r\n        ? `🏆 ${localStorage.getItem(currentFormat) + \"s\"}`\r\n        : \"🏆 none\"\r\n    );\r\n  };\r\n\r\n  const PreGameTiles = defaultBoardState.map((tile, i) => {\r\n    if (tile.c == 1) {\r\n      return (\r\n        <div\r\n          key={`pg-${i}`}\r\n          onContextMenu={(e) => {\r\n            e.preventDefault();\r\n          }}\r\n        >\r\n          {board.map((innerTile) => {\r\n            if (innerTile.r == i / numOfColumns + 1)\r\n              return (\r\n                <div\r\n                  className=\"tile pre-game\"\r\n                  onClick={() => {\r\n                    startGame(innerTile.id);\r\n                  }}\r\n                  key={`pg-r${innerTile.r}c${innerTile.c}`}\r\n                />\r\n              );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n  });\r\n\r\n  const Tiles = board.map((tile, i) => {\r\n    if (tile.c == 1) {\r\n      return (\r\n        <div key={i}>\r\n          {board.map((innerTile) => {\r\n            if (innerTile.r == i / numOfColumns + 1)\r\n              return (\r\n                <Tile\r\n                  minesAround={innerTile.minesAround}\r\n                  isMine={innerTile.isMine}\r\n                  setTilesRemaining={setTilesRemaining}\r\n                  tilesRemaining={tilesRemaining}\r\n                  key={`r${innerTile.r}c${innerTile.c}`}\r\n                  swept={innerTile.swept}\r\n                  c={innerTile.c}\r\n                  r={innerTile.r}\r\n                  boardState={board}\r\n                  setBoardState={setBoard}\r\n                  floodFill={floodFill}\r\n                  id={innerTile.id}\r\n                  loseGame={loseGame}\r\n                  gameStatus={gameStatus}\r\n                  flagStatus={innerTile.flagStatus}\r\n                />\r\n              );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"controls\">\r\n          <span>{message}</span>\r\n\r\n          {gameStatus == \"wonGame\" && <div onClick={prepNewGame}>{\"😎\"}</div>}\r\n          {gameStatus == \"lostGame\" && <div onClick={prepNewGame}>{\"😬\"}</div>}\r\n          {(gameStatus == \"preGame\" || gameStatus == \"inGame\") && (\r\n            <div\r\n              onClick={() => {\r\n                alert(alertMessage);\r\n              }}\r\n            >\r\n              {\"❔\"}\r\n            </div>\r\n          )}\r\n\r\n          <span style={{ textAlign: \"right\" }}>\r\n            <Timer\r\n              gameStatus={gameStatus}\r\n              setMessage={setMessage}\r\n              currentFormat={currentFormat}\r\n            />\r\n          </span>\r\n        </div>\r\n        <div\r\n          className={`board ${\r\n            (gameStatus == \"lostGame\" || gameStatus == \"wonGame\") && \"postGame\"\r\n          }`}\r\n        >\r\n          {gameStatus == \"preGame\" ? PreGameTiles : Tiles}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App.tsx\";\r\n// import reportWebVitals from \"./reportWebVitals\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}